
********** Objects **********

Objects:
- objects can be types by declaring wht the object should look link in the annotation.
- accessing a property that isn't defined or performing operations without keeping in mind will throw errors!

    // FUNCTION WITH OBJECT PARAMETER TYPE
    function createUser(user: {
      username: string;
      email: string;
      isAdmin: boolean;
    }): string {
      return "hi";
    }

    // CALL
    createUser({isAdmin: true, username: "chicken", email: "todd@gmail.com"})


Excess Properties:
- object literals in function calls CANNOT have excess properties
- a variable of object in function calls CAN have excess properties


Type Alias
- reusing a type and giving it a name
- Instead of writing out object types in an annotation, we can declare them separately in a type alias, which is simply the desired shape of the object
- This allows us to make our code more readable and even reuse the types elsewhere in our code.


Nested Objects:
-